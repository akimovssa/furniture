--
-- PostgreSQL database dump
--

-- Dumped from database version 16.2
-- Dumped by pg_dump version 16.2

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: add_client_with_validation(character varying, character varying, character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.add_client_with_validation(IN p_first_name character varying, IN p_last_name character varying, IN p_patronymic character varying, IN p_phone character varying, IN p_email character varying, IN p_address character varying)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    IF p_first_name IS NULL OR p_first_name = '' THEN
        RAISE EXCEPTION 'Имя не может быть пустым';
    END IF;
    IF p_last_name IS NULL OR p_last_name = '' THEN
        RAISE EXCEPTION 'Фамилия не может быть пустой';
    END IF;
    IF p_phone IS NULL OR p_phone = '' THEN
        RAISE EXCEPTION 'Телефон не может быть пустым';
    END IF;
    IF NOT p_phone ~ '^\+7[0-9]{10}$' THEN
        RAISE EXCEPTION 'Некорректный формат телефона. Ожидается: +7XXXXXXXXXX';
    END IF;
    IF p_email IS NOT NULL AND p_email != '' AND NOT p_email ~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$' THEN
        RAISE EXCEPTION 'Некорректный формат email';
    END IF;
    IF EXISTS (SELECT 1 FROM clients WHERE phone = p_phone) THEN
        RAISE EXCEPTION 'Клиент с таким телефоном уже существует';
    END IF;
    INSERT INTO clients (first_name, last_name, patronymic, phone, email, address)
    VALUES (p_first_name, p_last_name, p_patronymic, p_phone, p_email, p_address);
    RAISE NOTICE 'Клиент % % успешно добавлен', p_first_name, p_last_name;
END;
$_$;


ALTER PROCEDURE public.add_client_with_validation(IN p_first_name character varying, IN p_last_name character varying, IN p_patronymic character varying, IN p_phone character varying, IN p_email character varying, IN p_address character varying) OWNER TO postgres;

--
-- Name: calculate_purchase_amount(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.calculate_purchase_amount() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.amount = NEW.quantity * NEW.price;
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.calculate_purchase_amount() OWNER TO postgres;

--
-- Name: calculate_sale_amount(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.calculate_sale_amount() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    SELECT price INTO NEW.amount
    FROM products
    WHERE id = NEW.product_id;
    NEW.amount = NEW.quantity * NEW.amount;
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.calculate_sale_amount() OWNER TO postgres;

--
-- Name: calculate_total_sales_amount(integer, date, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.calculate_total_sales_amount(p_product_id integer, p_start_date date, p_end_date date) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
DECLARE
    total_amount DECIMAL(10,2);
BEGIN
    SELECT COALESCE(SUM(amount), 0)
    INTO total_amount
    FROM sales
    WHERE product_id = p_product_id
    AND sale_date BETWEEN p_start_date AND p_end_date;
    RETURN total_amount;
END;
$$;


ALTER FUNCTION public.calculate_total_sales_amount(p_product_id integer, p_start_date date, p_end_date date) OWNER TO postgres;

--
-- Name: update_stock_on_sale(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_stock_on_sale() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        IF (SELECT stock_quantity FROM products WHERE id = NEW.product_id) < NEW.quantity THEN
            RAISE EXCEPTION 'Недостаточно товара на складе для продажи (ID товара: %)', NEW.product_id;
        END IF;
        UPDATE products
        SET stock_quantity = stock_quantity - NEW.quantity
        WHERE id = NEW.product_id;
    ELSIF TG_OP = 'UPDATE' THEN
        UPDATE products
        SET stock_quantity = stock_quantity + OLD.quantity
        WHERE id = OLD.product_id;
        IF (SELECT stock_quantity FROM products WHERE id = NEW.product_id) < NEW.quantity THEN
            RAISE EXCEPTION 'Недостаточно товара на складе для обновления продажи (ID товара: %)', NEW.product_id;
        END IF;
        UPDATE products
        SET stock_quantity = stock_quantity - NEW.quantity
        WHERE id = NEW.product_id;
    ELSIF TG_OP = 'DELETE' THEN
        UPDATE products
        SET stock_quantity = stock_quantity + OLD.quantity
        WHERE id = OLD.product_id;
    END IF;
    RETURN NULL;
END;
$$;


ALTER FUNCTION public.update_stock_on_sale() OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: clients; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.clients (
    id integer NOT NULL,
    first_name character varying(50) NOT NULL,
    last_name character varying(50) NOT NULL,
    patronymic character varying(50),
    phone character varying(20) NOT NULL,
    email character varying(100),
    address character varying(200)
);


ALTER TABLE public.clients OWNER TO postgres;

--
-- Name: clients_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.clients ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.clients_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: employees; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.employees (
    id integer NOT NULL,
    user_id integer,
    first_name character varying(50) NOT NULL,
    last_name character varying(50) NOT NULL,
    patronymic character varying(50),
    "position" character varying(100) NOT NULL,
    phone character varying(20) NOT NULL,
    email character varying(100) NOT NULL,
    experience integer
);


ALTER TABLE public.employees OWNER TO postgres;

--
-- Name: employees_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.employees ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.employees_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: product_category; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_category (
    id integer NOT NULL,
    category_name character varying(50)
);


ALTER TABLE public.product_category OWNER TO postgres;

--
-- Name: product_category_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.product_category ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.product_category_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: products; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.products (
    id integer NOT NULL,
    category_id integer NOT NULL,
    name character varying(100) NOT NULL,
    description character varying(255),
    price numeric(10,2) NOT NULL,
    stock_quantity integer NOT NULL
);


ALTER TABLE public.products OWNER TO postgres;

--
-- Name: products_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.products ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.products_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: purchases; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.purchases (
    id integer NOT NULL,
    supplier_id integer NOT NULL,
    material_name character varying(100) NOT NULL,
    quantity integer NOT NULL,
    price numeric(10,2) NOT NULL,
    amount numeric(10,2) NOT NULL,
    purchase_date date DEFAULT CURRENT_DATE
);


ALTER TABLE public.purchases OWNER TO postgres;

--
-- Name: purchases_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.purchases ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.purchases_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: sales; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.sales (
    id integer NOT NULL,
    employee_id integer NOT NULL,
    product_id integer NOT NULL,
    client_id integer,
    quantity integer NOT NULL,
    amount numeric(10,2) NOT NULL,
    sale_date date DEFAULT CURRENT_DATE
);


ALTER TABLE public.sales OWNER TO postgres;

--
-- Name: sales_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.sales ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.sales_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: suppliers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.suppliers (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    contact_person character varying(100) NOT NULL,
    phone character varying(20) NOT NULL,
    email character varying(100) NOT NULL,
    address character varying(200) NOT NULL,
    inn character varying(12) NOT NULL,
    CONSTRAINT suppliers_inn_check CHECK (((length((inn)::text) >= 10) AND (length((inn)::text) <= 12)))
);


ALTER TABLE public.suppliers OWNER TO postgres;

--
-- Name: suppliers_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.suppliers ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.suppliers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    id integer NOT NULL,
    login character varying(50) NOT NULL,
    password character varying(50) NOT NULL
);


ALTER TABLE public.users OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.users ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: clients; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.clients (id, first_name, last_name, patronymic, phone, email, address) FROM stdin;
1	Сергей	Сидоров	\N	+79991234569	\N	\N
2	Иван	Петров	Сергеевич	+79991234567	ivan.petrov@mail.ru	Москва, ул. Ленина, д. 10, кв. 5
3	Анна	Смирнова	Александровна	+79992345678	anna.smirnova@yandex.ru	Санкт-Петербург, ул. Мира, д. 25, кв. 12
4	Михаил	Иванов	Викторович	+79993456789	mikhail.ivanov@gmail.com	Екатеринбург, ул. Победы, д. 8, кв. 3
5	Елена	Кузнецова	Дмитриевна	+79994567890	elena.kuznetsova@bk.ru	Новосибирск, ул. Советская, д. 15, кв. 7
6	Алексей	Васильев	Николаевич	+79995678901	alexey.vasiliev@mail.ru	Казань, ул. Центральная, д. 5, кв. 9
\.


--
-- Data for Name: employees; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.employees (id, user_id, first_name, last_name, patronymic, "position", phone, email, experience) FROM stdin;
2	1	Иван	Иванов	Иванович	Продавец	+79609008822	ivpr@gmail.com	2
1	1	Анна	Петрова		Менеджер	+79991234568	anna@mebel.ru	4
\.


--
-- Data for Name: product_category; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_category (id, category_name) FROM stdin;
1	Корпусная мебель
2	Мягкая мебель
4	Офисная мебель
\.


--
-- Data for Name: products; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.products (id, category_id, name, description, price, stock_quantity) FROM stdin;
2	2	Диван угловой	Удобный угловой диван с тканевой обивкой	25000.00	10
3	2	Кровать двуспальная	Деревянная кровать с ортопедическим основанием	18000.00	15
6	4	Кресло офисное	Эргономичное кресло с регулировкой высоты	8000.00	20
4	1	Обеденный стол	Стол из массива дуба на 6 персон	12000.00	5
1	1	Шкаф-купе	Шкаф с зеркальными дверями и встроенным освещением	15050.00	27
\.


--
-- Data for Name: purchases; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.purchases (id, supplier_id, material_name, quantity, price, amount, purchase_date) FROM stdin;
1	2	Клей по мебели	100	100000.00	10000000.00	2025-06-11
2	1	ДСП	43	2550.00	109650.00	2025-06-11
\.


--
-- Data for Name: sales; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.sales (id, employee_id, product_id, client_id, quantity, amount, sale_date) FROM stdin;
2	1	1	1	5	75000.00	2025-06-10
3	2	1	1	4	60200.00	2025-06-11
1	2	4	2	3	36000.00	2025-06-08
6	1	1	5	2	30100.00	2025-06-11
\.


--
-- Data for Name: suppliers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.suppliers (id, name, contact_person, phone, email, address, inn) FROM stdin;
2	ИП ПОСТАВКИ	Петров Петр Петрович	79608009010	post@info.ru	Москва, Брестская, 1	01025907013
1	ООО Мебель	Иванов Иван Иванович	79991234567	info@mebel.ru	Ростов-на-Дону, ул. Ленина, 10	013386411245
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users (id, login, password) FROM stdin;
1	admin	admin
\.


--
-- Name: clients_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.clients_id_seq', 6, true);


--
-- Name: employees_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.employees_id_seq', 2, true);


--
-- Name: product_category_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.product_category_id_seq', 4, true);


--
-- Name: products_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.products_id_seq', 6, true);


--
-- Name: purchases_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.purchases_id_seq', 2, true);


--
-- Name: sales_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.sales_id_seq', 6, true);


--
-- Name: suppliers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.suppliers_id_seq', 2, true);


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.users_id_seq', 1, true);


--
-- Name: clients clients_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.clients
    ADD CONSTRAINT clients_pkey PRIMARY KEY (id);


--
-- Name: employees employees_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_pkey PRIMARY KEY (id);


--
-- Name: product_category product_category_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_category
    ADD CONSTRAINT product_category_pkey PRIMARY KEY (id);


--
-- Name: products products_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_pkey PRIMARY KEY (id);


--
-- Name: purchases purchases_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.purchases
    ADD CONSTRAINT purchases_pkey PRIMARY KEY (id);


--
-- Name: sales sales_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sales
    ADD CONSTRAINT sales_pkey PRIMARY KEY (id);


--
-- Name: suppliers suppliers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.suppliers
    ADD CONSTRAINT suppliers_pkey PRIMARY KEY (id);


--
-- Name: users users_login_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_login_key UNIQUE (login);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: purchases trigger_purchase_amount; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_purchase_amount BEFORE INSERT OR UPDATE ON public.purchases FOR EACH ROW EXECUTE FUNCTION public.calculate_purchase_amount();


--
-- Name: sales trigger_sale_amount; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_sale_amount BEFORE INSERT OR UPDATE ON public.sales FOR EACH ROW EXECUTE FUNCTION public.calculate_sale_amount();


--
-- Name: employees employees_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: products products_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.product_category(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: purchases purchases_supplier_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.purchases
    ADD CONSTRAINT purchases_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: sales sales_client_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sales
    ADD CONSTRAINT sales_client_id_fkey FOREIGN KEY (client_id) REFERENCES public.clients(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: sales sales_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sales
    ADD CONSTRAINT sales_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: sales sales_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sales
    ADD CONSTRAINT sales_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

